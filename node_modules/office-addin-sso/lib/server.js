var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSOService = void 0;
// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in the root of the repo.
/*
    This file provides server configuration, startup and stop
*/
//const https = require("https");
const http = require("http");
const devCerts = require("office-addin-dev-certs");
const manifest = require("office-addin-manifest");
const app_1 = require("./app");
const ssoDataSettings_1 = require("./ssoDataSettings");
const defaults_1 = require("./defaults");
require('dotenv').config();
class SSOService {
    constructor(manifestPath) {
        this.port = process.env.PORT || '3000';
        this.app = new app_1.App(this.port);
        this.app.initialize();
        this.manifestPath = manifestPath;
        this.ssoServiceStarted = false;
    }
    startSsoService(isTest = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (isTest) {
                        process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
                    }
                    yield this.getSecret(isTest);
                    yield this.startServer(this.app.appInstance, this.port);
                    this.ssoServiceStarted = true;
                    defaults_1.usageDataObject.reportSuccess('startSsoService()');
                    resolve(true);
                }
                catch (err) {
                    defaults_1.usageDataObject.reportException('startSsoService()', err);
                    reject(false);
                }
            }));
        });
    }
    getSecret(isTest = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const manifestInfo = yield manifest.readManifestFile(this.manifestPath);
            const appSecret = ssoDataSettings_1.getSecretFromCredentialStore(manifestInfo.displayName, isTest);
            if (appSecret === '') {
                const errorMessage = 'Call to getSecretFromCredentialStore returned empty string';
                throw new Error(errorMessage);
            }
            process.env.secret = appSecret;
        });
    }
    getTestServerState() {
        return this.ssoServiceStarted;
    }
    startServer(app, port) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //const options = yield devCerts.getHttpsServerOptions();
                    //this.server = https.createServer(options, app).listen(port, () => console.log(`JLO HTTPS Server running on ${port}`));
                    this.server = http.createServer(app).listen(port, () => console.log(`JLO HTTP Server running on ${port}`));
                    resolve(true);
                }
                catch (err) {
                    const errorMessage = `Unable to start test server on port ${port}: \n${err}`;
                    reject(errorMessage);
                }
            }));
        });
    }
    stopServer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                if (this.ssoServiceStarted) {
                    try {
                        this.server.close();
                        this.ssoServiceStarted = false;
                        resolve(true);
                    }
                    catch (err) {
                        const errorMessage = `Unable to stop test server: \n${err}`;
                        reject(new Error(errorMessage));
                    }
                }
                else {
                    // test server not started
                    resolve(false);
                }
            }));
        });
    }
}
exports.SSOService = SSOService;
//# sourceMappingURL=server.js.map