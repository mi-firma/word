/*
 * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in root of repo. -->
 *
 * This file defines the routes within the authRoute router.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthRouter = void 0;
const express = require("express");
const fetch = require("node-fetch");
const form = require("form-urlencoded");
const defaults_1 = require("./defaults");
class AuthRouter {
    constructor() {
        this.router = express.Router();
        this.router.get('/', function (req, res, next) {
            return __awaiter(this, void 0, void 0, function* () {
                const authorization = req.get('Authorization');
                const scopeName = process.env.SCOPE || 'User.Read';
                if (authorization == null) {
                    let error = new Error('No Authorization header was found.');
                    next(error);
                }
                else {
                    const [/* schema */ , jwt] = authorization.split(' ');
                    const formParams = {
                        client_id: process.env.CLIENT_ID,
                        client_secret: process.env.secret,
                        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
                        assertion: jwt,
                        requested_token_use: 'on_behalf_of',
                        scope: [scopeName].join(' ')
                    };
                    const stsDomain = 'https://login.microsoftonline.com';
                    const tenant = 'common';
                    const tokenURLSegment = 'oauth2/v2.0/token';
                    try {
                        const tokenResponse = yield fetch(`${stsDomain}/${tenant}/${tokenURLSegment}`, {
                            method: 'POST',
                            body: form.default(formParams),
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/x-www-form-urlencoded'
                            }
                        });
                        const json = yield tokenResponse.json();
                        res.send(json);
                        // Send usage data
                        defaults_1.usageDataObject.reportSuccess('authRouter()', { scope: scopeName });
                    }
                    catch (error) {
                        res.status(500).send(error);
                        defaults_1.usageDataObject.reportException('authRouter()', error);
                    }
                }
            });
        });
    }
}
exports.AuthRouter = AuthRouter;
//# sourceMappingURL=authRoute.js.map